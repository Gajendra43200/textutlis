{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","type","msg","Navbar","concat","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","htmlFor","TextForm","handleOnChange","event","console","log","setText","target","value","_useState","useState","_useState2","_slicedToArray","text","Fragment","style","color","heading","onChange","background","rows","newText","showAlert","document","getElementById","Select","navigator","clipboard","writeText","split","join","length","prototypes","PropTypes","string","isRequired","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","backgroundColor","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.ad8fdc41.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) =>{\r\n    const lower = word.toLowerCase();\r\n    return  lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    props.alert && <div className={`alert alert-&{props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link }  from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    // <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      //enable dark mode  in video no. 12\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    {/* <nav className=\"navbar navbar-expand-lg navbar-light  bg-light\"> color change ho jata he =yha light he fir dark kra */}\r\n  \r\n    <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\"to=\"/\">{props.title}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\"  href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\"href=\"/\">{props.aboutText}</a>\r\n          {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n\r\n        </li>\r\n       </ul>\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n         <button className=\"btn btn-outline-success\" type=\"submit\">Search</button> */}\r\n  \r\n\r\n         <div className={`form-check form-switch text-${props.mode==='light'?'dark':'lihgt'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\"  id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">enable dark mode</label>\r\n          </div>\r\n         </div>\r\n      </div>\r\n\r\n    </nav>\r\n    \r\n  )\r\n}\r\n\r\nNavbar.prototypes = {\r\n  // with help of this prototype we can set probs property if we set prototype = string so we can only use title = string\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'set title here',\r\n  aboutText: 'about text here'\r\n};","import React, {useState} from 'react'\r\n// import PropTypes from 'prop-types'\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase case clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"convert to upper case\" ,\"success\");\r\n    }\r\n   \r\n    const handleLoClick = ()=>{\r\n        console.log(\"Uppercase case clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const handleCalClick = ()=>{\r\n        console.log(\"Uppercase case clicked\" + text);\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n    const hadleCopy = () => {\r\n      let text = document.getElementById(\"Mybox\");\r\n      text.Select();\r\n      navigator.clipboard.writeText(text.value);\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        console.log(\" on change\");\r\n\r\n        setText(event.target.value);\r\n    }\r\n    const handleExtraSpace = () =>{\r\n      // use ajex\r\n      let newText = text.split(/[ ]+/);\r\n      setText(newText.join(\" \"))\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n    // text=\"new text\";//wrong way to change state\r\n    // setText(\"new text\");//wright way to change state \r\n  return (\r\n    <>\r\n    <div className='container'  style={{color: props.mode==='dark'?'white':'black'}}>\r\n      <h1>{props.heading} </h1>\r\n      <div className=\"mb-3\">\r\n      \r\n      <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{background :props.mode==='light'?'grey':'white', color: props.mode==='dark'?'black':'white'}} id=\"Mybox\" rows=\"8\"></textarea>\r\n      </div>\r\n    </div>\r\n    {/* mx = ek class he jo margin deti he x axia me  */}\r\n      <button className=\"btn btn-primery mx-1\" onClick={handleUpClick}>Convert to upper case </button>\r\n      <button className=\"btn btn-success mx-1\" onClick={handleLoClick}>Convert to lower  case </button>\r\n      <button className=\"btn btn-success mx-1\" onClick={handleCalClick}>CLEAR</button>\r\n      <button className=\"btn btn-success mx-1\" onClick={handleOnChange}> handleOnChange</button>\r\n      <button className=\"btn btn-success mx-1\" onClick={hadleCopy}> copy</button>\r\n      <button className=\"btn btn-success mx-1\" onClick={handleExtraSpace}> remove extraspace</button>\r\n    <div className='container my-3'  style={{color: props.mode==='dark'?'white':'black'}} >\r\n    {/* my-3 this give a space b/w upper div  */}\r\n    <h1>your text summary</h1>\r\n    <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n    {/* {text.split{\" \"}.length} =this give a array jisme words count karege space ke baad hoge  */}\r\n    {/* {text.length}= yhe character dega */}\r\n    <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n    <h2>Preview</h2>\r\n    <p>{text.length>0?text:\"Enter something to previwe\"}</p>\r\n\r\n    </div>\r\n    </>\r\n    \r\n  )\r\n}\r\n\r\n","\nimport React from 'react';\nimport { useState } from 'react';\nimport './Appa.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n \n// } from 'react-router-dom';\n\n\n\n function App() {\n  const [mode, setMode] = useState('light'); //whether dark mode enable or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() =>{\n      setAlert(null);\n    },3000);\n    \n  }\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"Dark Mode Is Enable\", \"success\");\n      // setInterval(() => {\n      //   document.title = 'TextUtils - Dark Mode';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'TextUtils - download  Mode';\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light Mode Is Enable\", \"success\");\n      document.title = 'TextUtils - light Mode';\n    }\n  }\n  return (\n    <>\n   \n   \n    {/* <Navbar/> */}\n    {/* <Router> */}\n   \n    <Navbar title=\"TexTutList\"  mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n\n    <div className=\"container my-3\">\n    <TextForm showAlert={showAlert} heading='Enter Here Your Title' mode={mode} />\n    {/* <Routes> */}\n          {/* <Route exact path=\"/\" element={ <TextForm showAlert={showAlert} heading='enter here your title' mode={mode} />}/>\n          <Route exact path=\"/about\" element={  <About />}/> */}\n         \n           {/* <Route path=\"/about\">\n            <About />\n          </Route>  */}\n         \n    {/* </Routes> */}\n    \n    </div>\n    {/* </Router> */}\n    </>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}